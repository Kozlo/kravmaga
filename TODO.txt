(DONE)- remove server-side rendering
(DONE)- move the index file from view to public
(DONE)- create all CRUD routes for users
(DONE)- fix routes and make them RESTful
(DONE)- figure out the best way to organize back-end code (would need some controller)
(DONE)- replace user_id field with auth_id to avoid confusion
(DONE)- adjust all routes in front-end with the new system
(DONE)- move the notifications bar to a different position (not on top of the logout button)
(DONE)- fix error with changing fromcontrol values by adding empty string default values to updatable
(DONE)- add a possibility for regular users to update their info (should be relatively easy)
(DONE)- add a possibility to RUD (no C) users
(DONE)- replace PUT with PATCH
(DONE)- reply to Ronalds
- re-do the authentication according to Ronald's request
  - create the new functionality
  - add a default admin user script
  - make the necessary front-end changes
  - test the new code
- change the back-end code to make sure all ES6 types are used (e.g. import/export instead od require)
- replace all regular bootstrap with react-bootstrap and see if it can be removed completely
- switch to webpack and add hot module re-load
- create a 'lessons' section for the admin page
- add proper validation to form fields (need to figure out a general one)

- check if on logout the token also needs to be disabled (like request to back-end and auht0)
- check if there are no double dependencies and see if they can be removed (like bootstrap, so react-bootstrap is used only
- add filters and limits to user (and other lists)
- consider looping through the form control and creating them dynamically instead of having separate entries

- optionally add the PUT method as well, but make sure it works as expected
- Add JSDoc to components (research this a bit as well)

Bugs:
- when the user reloads the page and turns out he is blocked, 2 error messages are shown (from navbar and profile page requests)

Morten:
- move adminUserScript outside server folder
- use middleware for admin user
- user authentication middleware for all routes
- remove some checks and make mongoose catch them
- improve the config file if I leave it (prolly not)

-----------------------------------------------
Later
- add filters to get users route
- check out react bootstarp and how to use it... and if I'm using ir correctly
- play around with the styles (currently using the one from the tutorial)
- check out Auth0 to see if it's possible to replace the popup with a regular form
- check out Auth0 to see what other options there are (e.g. faster popup animation, custom fields, language etc.)
- make a better footer
- add active styles for links in navbar
- figure out if it's possible to not show the login page if the user is to be redirected
- add Latvian language to Auht0
- add other logon options (FB, Google+ etc.)
- Read on SPA routing/navigation logic best practices and (DONE) amend routing/navbar accordingly
- add login with FB option (currently only Google)
- should test routes for profile info, maybe need to logout user if authorization isn't fine on server,
- If the user is logging in with an unauthorized email (regardless of type - email/FB/GOOG), ask them to vertify the account first (indicate if it's email, FB, or GOOGLE)
- Krav Maga user account linking:
  -) make emails unique
  -) remove identities entry to an account and create 3 separate fields: auht0ID, facebookID, googleID
  -) first check if the id (1 of 3) exists in the DB (assume if the user got this far, the email is vertified)
    - if yes, then login the user
    - if no, then find a user based on the email
      - if not found create a brand new user
  	- if yes (the email exists in the DB), link the account to the email
  -) check out the following link for linking the accounts on Auth0 side as well: https://auth0.com/docs/link-accounts
  -) at very login, check if the passed profile has some data that the user doesn't have in the DB, and update it
- think about what happens when the use changes his/her password after having signed up with e-mail
  - probably would need to change the user on auth0 side via the API

-----------------------------------------------
Notes:
- Auth0 gives the following info for profile:
clientID: "Mr8dVDOpvKRoMPH6rj0hHnHYNJJcV5Cf"
user_id: "auth0|57b560d73fa4e89a29e99a0d"
provider:
  connection: "Username-Password-Authentication"
  isSocial: false
  provider: "auth0"
  user_id: "57b560d73fa4e89a29e99a0d"


Google:
clientID: "Mr8dVDOpvKRoMPH6rj0hHnHYNJJcV5Cf"
user_id: "google-oauth2|107376329887259877921"
provider:
  connection: "google-oauth2"
  isSocial:true
  provider: "google-oauth2"
  user_id: "107376329887259877921"


Facebook
clientID: "Mr8dVDOpvKRoMPH6rj0hHnHYNJJcV5Cf"
user_id: "facebook|10211758406534749"
provider:
  connection: "facebook"
  isSocial: true
  provider: "facebook"
  user_id: "10211758406534749"