(DONE)- remove server-side rendering
(DONE)- move the index file from view to public
(DONE)- create all CRUD routes for users
- replace user_id field with auth_id to avoid confusion
- adjust all routes in front-end with the new system
- finish implementing the admin page
  - finish the base set-up
  - add a possibility to CRUD users
  - create a 'lessons' section

- switch to webpack and add hot module re-load
- check if on logout the token also needs to be disabled (like request to back-end and auht0)
- check if there are no double dependencies and see if they can be removed (like bootstrap, so react-bootstrap is used only
- fix routes and make them RESTful
- figure out the best way to organize back-end code (would need some controller)
- move the popup away from the logout button or vice versa

- Add an admin page
  (DONE)- add admin feature to Auth0 (set the metadata)
  (DONE)- Update user schema to refleact admin feature (also user creation/update)
  - create a blank admin page
  - create a table with a list of all users

- Make it possible to update user profiles

- Add a possibility for an admin to create lessons
  - add a table with lessons to both the admin panel and the user section

- Add JSDoc to components (research this a bit as well)


-----------------------------------------------
Later
- add filters to get users route
- check out react bootstarp and how to use it... and if I'm using ir correctly
- play around with the styles (currently using the one from the tutorial)
- check out Auth0 to see if it's possible to replace the popup with a regular form
- check out Auth0 to see what other options there are (e.g. faster popup animation, custom fields, language etc.)
- make a better footer
- add active styles for links in navbar
- figure out if it's possible to not show the login page if the user is to be redirected
- add Latvian language to Auht0
- add other logon options (FB, Google+ etc.)
- Read on SPA routing/navigation logic best practices and (DONE) amend routing/navbar accordingly
- add login with FB option (currently only Google)
- should test routes for profile info, maybe need to logout user if authorization isn't fine on server,
- If the user is logging in with an unauthorized email (regardless of type - email/FB/GOOG), ask them to vertify the account first (indicate if it's email, FB, or GOOGLE)
- Krav Maga user account linking:
  -) make emails unique
  -) remove identities entry to an account and create 3 separate fields: auht0ID, facebookID, googleID
  -) first check if the id (1 of 3) exists in the DB (assume if the user got this far, the email is vertified)
    - if yes, then login the user
    - if no, then find a user based on the email
      - if not found create a brand new user
  	- if yes (the email exists in the DB), link the account to the email
  -) check out the following link for linking the accounts on Auth0 side as well: https://auth0.com/docs/link-accounts
  -) at very login, check if the passed profile has some data that the user doesn't have in the DB, and update it

-----------------------------------------------
Notes:
- Auth0 gives the following info for profile:
clientID: "Mr8dVDOpvKRoMPH6rj0hHnHYNJJcV5Cf"
user_id: "auth0|57b560d73fa4e89a29e99a0d"
provider:
  connection: "Username-Password-Authentication"
  isSocial: false
  provider: "auth0"
  user_id: "57b560d73fa4e89a29e99a0d"


Google:
clientID: "Mr8dVDOpvKRoMPH6rj0hHnHYNJJcV5Cf"
user_id: "google-oauth2|107376329887259877921"
provider:
  connection: "google-oauth2"
  isSocial:true
  provider: "google-oauth2"
  user_id: "107376329887259877921"


Facebook
clientID: "Mr8dVDOpvKRoMPH6rj0hHnHYNJJcV5Cf"
user_id: "facebook|10211758406534749"
provider:
  connection: "facebook"
  isSocial: true
  provider: "facebook"
  user_id: "10211758406534749"